-- 샘플 데이터
CREATE TABLE tCar
(
	car VARCHAR(30) NOT NULL,		-- 이름
	capacity INT NOT NULL,			-- 배기량
	price INT NOT NULL,			-- 가격
	maker VARCHAR(30) NOT NULL		-- 제조사
);

INSERT INTO tCar (car, capacity, price, maker) VALUES ('소나타', 2000, 2500, '현대');
INSERT INTO tCar (car, capacity, price, maker) VALUES ('티볼리', 1600, 2300, '쌍용');
INSERT INTO tCar (car, capacity, price, maker) VALUES ('A8', 3000, 4800, 'Audi');
INSERT INTO tCar (car, capacity, price, maker) VALUES ('SM5', 2000, 2600, '삼성');

CREATE TABLE tMaker
(
	maker VARCHAR(30) NOT NULL,		-- 회사
	factory CHAR(10) NOT NULL,	    	-- 공장
	domestic CHAR(1) NOT NULL		-- 국산 여부. Y/N
);

INSERT INTO tMaker (maker, factory, domestic) VALUES ('현대', '부산', 'y');
INSERT INTO tMaker (maker, factory, domestic) VALUES ('쌍용', '청주', 'y');
INSERT INTO tMaker (maker, factory, domestic) VALUES ('Audi', '독일', 'n');
INSERT INTO tMaker (maker, factory, domestic) VALUES ('기아', '서울', 'y');


-- Cross Join : Cartesian Product 
SELECT *
FROM EMP, DEPT;

SELECT * 
FROM tCar, tMaker;

-- 사원 정보를 출력할 때 각 사원들이 소속된 부서의 상세 정보를 출력하기 위해서 두 개의 테이블을 EQUI JOIN 
SELECT *
FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO;

SELECT * 
FROM tCar, tMaker
WHERE tCar.MAKER = tMaker.MAKER ;

-- EMP 테이블의 ENAME이 MILLER인 사원의 ENAME과 DEPT 테이블의 DNAME을 출력
SELECT ENAME, DNAME
FROM EMP, DEPT
WHERE EMP.DEPTNO=DEPT.DEPTNO
AND ENAME='MILLER';

-- 컬럼 이름의 모호성
SELECT ENAME, DNAME, DEPTNO
FROM EMP, DEPT 
WHERE EMP.DEPTNO = DEPT.DEPTNO
AND ENAME='MILLER';

-- 컬럼 이름 앞에 테이블 이름을 기재해서 컬럼 이름의 모호성 해결
SELECT EMP.ENAME, DEPT.DNAME, EMP.DEPTNO
FROM EMP, DEPT
WHERE EMP.DEPTNO=DEPT.DEPTNO
AND ENAME='MILLER';

-- 별명 사용
SELECT E.ENAME, D.DNAME, E.DEPTNO, D.DEPTNO
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
AND E.ENAME='MILLER';

-- 연습문제
SELECT ENAME, SAL, LOC
FROM DEPT, EMP
WHERE DEPT.DEPTNO = EMP.DEPTNO AND LOC = 'NEW YORK';

SELECT ENAME, HIREDATE
FROM EMP, DEPT 
WHERE EMP.DEPTNO = DEPT.DEPTNO AND DNAME = 'ACCOUNTING';

SELECT ENAME, DNAME
FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO AND JOB = 'MANAGER';

-- 급여 등급 테이블(SALGRADE)을 데이터 확인
SELECT * 
FROM SALGRADE;

-- NON EQUI-JOIN
SELECT ENAME, SAL, GRADE
FROM EMP, SALGRADE 
WHERE SAL BETWEEN LOSAL AND HISAL;

-- 이름 과 매니저 이름을 조회 
SELECT EMPLOYEE.ENAME || '의 매니저는 ' || MANAGER.ENAME
FROM EMP EMPLOYEE, EMP MANAGER
WHERE EMPLOYEE.MGR = MANAGER.EMPNO;

-- EMP 테이블에서 MANAGER 가 ‘KING’인 사원들의 이름(ENAME)과 직급(JOB)을 조회
SELECT E1.ENAME, E1.JOB
FROM EMP E1, EMP E2
WHERE E1.MGR = E2.EMPNO AND E2.ENAME ='KING';

-- OUTER JOIN
SELECT EMPLOYEE.ENAME || '의 매니저는'
             || MANAGER.ENAME || '입니다.' 
FROM EMP EMPLOYEE, EMP MANAGER
WHERE EMPLOYEE.MGR = MANAGER.EMPNO(+);

SELECT ENAME, DEPT.DEPTNO, DNAME
FROM EMP, DEPT
WHERE EMP.DEPTNO(+) = DEPT.DEPTNO;

-- CROSS JOIN
SELECT * 
FROM EMP CROSS JOIN DEPT;

-- INNER JOIN
SELECT ENAME, DNAME 
FROM EMP INNER JOIN DEPT
ON EMP.DEPTNO=DEPT.DEPTNO
WHERE ENAME='MILLER';

-- USING
SELECT EMP.ENAME, DEPT.DNAME 
FROM EMP INNER JOIN DEPT
USING (DEPTNO);

SELECT EMP.ENAME, DEPT.DNAME 
FROM EMP NATURAL JOIN DEPT;

-- DEPT01 테이블 생성
CREATE TABLE DEPT01( 
DEPTNO NUMBER(2), 
DNAME VARCHAR2(14)); 

-- 샘플 데이터 추가
INSERT INTO DEPT01 VALUES(10, 'ACCOUNTING');
INSERT INTO DEPT01 VALUES (20, 'RESEARCH');

SELECT * 
FROM DEPT01;

-- DEPT02 테이블 생성
CREATE TABLE DEPT02( 
DEPTNO NUMBER(2), 
DNAME VARCHAR2(14)); 

-- 샘플 데이터 추가
INSERT INTO DEPT02 VALUES(10, 'ACCOUNTING');
INSERT INTO DEPT02 VALUES (30, 'SALES'); 

SELECT * 
FROM DEPT02;

-- OUTER JOIN
SELECT *
FROM DEPT01 LEFT OUTER JOIN DEPT02
ON DEPT01.DEPTNO = DEPT02.DEPTNO;

SELECT *
FROM DEPT01 RIGHT OUTER JOIN DEPT02
USING(DEPTNO);

SELECT *
FROM DEPT01 FULL OUTER JOIN DEPT02
USING(DEPTNO);

-- 다중 조인
SELECT * 
FROM tCar C
INNER JOIN tMaker M ON C.maker = M.maker INNER JOIN tCity T ON M.factory = T.name;

SELECT C.car, M.factory, T.area 
FROM tCar C INNER JOIN tMaker M ON C.maker = M.maker INNER JOIN tCity T ON M.factory = T.name;

SELECT * 
FROM tMaker M LEFT OUTER JOIN tCity T ON M.factory = T.name LEFT OUTER JOIN tCar C ON M.maker = C.maker;

-- UNION
SELECT DEPTNO			
FROM DEPT				 
	UNION				    
SELECT DEPTNO			    
FROM EMP;

SELECT DEPTNO			
FROM DEPT				 
	UNION	ALL			    
SELECT DEPTNO			    
FROM EMP;

-- INTERSECT
SELECT DEPTNO
FROM DEPT
INTERSECT
SELECT DEPTNO
FROM EMP;

-- MINUS
SELECT DEPTNO
FROM DEPT
MINUS
SELECT DEPTNO
FROM EMP;

-- 계층형 조회
SELECT MAX(LEVEL)
FROM EMP
START WITH MGR IS NULL
CONNECT BY PRIOR EMPNO = MGR;

SELECT LEVEL, EMPNO, MGR, ENAME
FROM EMP
START WITH MGR IS NULL
CONNECT BY PRIOR EMPNO = MGR;

SELECT LEVEL, EMPNO, ENAME, MGR, JOB
FROM EMP
START WITH JOB = 'PRESIDENT'
CONNECT BY PRIOR EMPNO = MGR AND LEVEL <= 3
ORDER BY LEVEL DESC;

SELECT LEVEL, EMPNO, MGR, ENAME, CONNECT_BY_ISLEAF
FROM EMP
START WITH MGR IS NULL
CONNECT BY PRIOR EMPNO = MGR;
---------------------------------------------------------------------------------------------------

SELECT ENAME, EMP.DEPTNO, DNAME FROM EMP JOIN DEPT ON EMP.DEPTNO = DEPT.DEPTNO;

SELECT ENAME, EMP.DEPTNO, DNAME FROM EMP JOIN DEPT ON EMP.DEPTNO = DEPT.DEPTNO AND LOC='NEW YORK';

SELECT ENAME, EMP.DEPTNO, LOC FROM EMP JOIN DEPT ON EMP.DEPTNO=DEPT.DEPTNO AND COMM IS NOT NULL;

SELECT ENAME, JOB, EMP.DEPTNO, LOC FROM EMP JOIN DEPT ON EMP.DEPTNO = DEPT.DEPTNO AND ENAME LIKE '%L%';

SELECT E.ENAME, E.HIREDATE, M.ENAME, M.HIREDATE
FROM EMP E, EMP M WHERE E.MGR = M.EMPNO AND E.HIREDATE<M.HIREDATE;