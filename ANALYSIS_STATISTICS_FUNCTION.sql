-- 샘플 데이터 생성
CREATE TABLE TMONTHSALE
(
	YEAR NUMBER,
	MONTH NUMBER,
	SALES	NUMBER
);

INSERT INTO TMONTHSALE VALUES(2021, 9, 3650);
INSERT INTO TMONTHSALE VALUES(2021, 10, 4120);
INSERT INTO TMONTHSALE VALUES(2021, 11, 5000);
INSERT INTO TMONTHSALE VALUES(2021, 12, 4420);
INSERT INTO TMONTHSALE VALUES(2022, 1, 3800);
INSERT INTO TMONTHSALE VALUES(2022, 2, 4200);
INSERT INTO TMONTHSALE VALUES(2022, 3, 4150);

-- GROUP BY
-- 성별 급여 합계 
SELECT GENDER, SUM(SALARY) FROM TSTAFF GROUP BY GENDER;
-- 부서별 급여 합계
SELECT DEPART, SUM(SALARY) FROM TSTAFF GROUP BY DEPART;
-- 부서 와 성별 급여 합계
SELECT DEPART, GENDER, SUM(SALARY) FROM TSTAFF GROUP BY DEPART, GENDER;

-- EMP 테이블에서 JOB 별 SAL의 합계와 전체 합계를 조회
SELECT NVL(JOB, 'TOTAL'), SUM(SAL)
FROM EMP
GROUP BY ROLLUP(JOB);

-- EMP 테이블에서 DEPTNO 별 SAL의 평균과 전체 평균을 조회
SELECT NVL(DEPTNO, 'TOTAL'), ROUND(AVG(SAL), 2)
FROM EMP
GROUP BY ROLLUP(DEPTNO);

SELECT DECODE(DEPTNO, NULL, 'TOTAL', DEPTNO), ROUND(AVG(SAL),2)
FROM EMP
GROUP BY ROLLUP(DEPTNO);

-- EMP 테이블에서 DEPTNO, JOB 별 SAL의 평균과 전체 평균을 조회
SELECT DEPTNO, JOB, ROUND(AVG(SAL),2)
FROM EMP
GROUP BY ROLLUP(DEPTNO, JOB);

SELECT DEPTNO, JOB, ROUND(AVG(SAL),2)
FROM EMP
GROUP BY DEPTNO, ROLLUP(JOB);

SELECT DEPTNO, JOB, ROUND(AVG(SAL),2)
FROM EMP
GROUP BY JOB, ROLLUP(DEPTNO);

-- CUBE
SELECT DEPTNO, JOB, SUM(SAL)
FROM EMP
GROUP BY CUBE(DEPTNO, JOB);

-- GROUPING
SELECT DEPTNO, GROUPING(DEPTNO), JOB, GROUPING(JOB), SUM(SAL)
FROM EMP
GROUP BY ROLLUP(DEPTNO, JOB);

SELECT DEPTNO, DECODE(GROUPING(DEPTNO), 1, '전체 합계') AS ALLTOT, JOB, DECODE(GROUPING(JOB), 1, '부서 합계') AS DEPTTOT, SUM(SAL)
FROM EMP
GROUP BY ROLLUP(DEPTNO, JOB);

SELECT DNAME, JOB, SUM(SAL) SAL, COUNT(A.EMPNO)
FROM EMP A, DEPT
WHERE A.DEPTNO = DEPT.DEPTNO
GROUP BY ROLLUP(DNAME, JOB);

SELECT CASE GROUPING(DEPART) WHEN 1 THEN '전체부서' ELSE DEPART END AS DEPAET, 
CASE GROUPING(GENDER) WHEN 1 THEN '전체성별' ELSE GENDER END AS GENDER, SUM(SALARY)
FROM TSTAFF GROUP BY CUBE(DEPART, GENDER)
ORDER BY DEPART, GENDER;

-- GROUPING SETS
SELECT DEPTNO, JOB, SUM(SAL)
FROM EMP
GROUP BY GROUPING SETS(DEPTNO, JOB);

-- 전체 합계 출력
SELECT EMPNO, ENAME, SAL, (SELECT SUM(SAL) FROM EMP) AS "전체 합계" FROM EMP;

SELECT EMPNO, ENAME, SAL, SUM(SAL) OVER() "전체 합계"
FROM EMP;

-- 개인 별 급여 비율 출력
SELECT EMPNO, ENAME, SAL, ROUND(SAL * 100.0 / SUM(SAL) OVER() ,2) AS "급여 비율"
FROM EMP;

-- 현재 행 까지의 합계
SELECT EMPNO, ENAME, SAL, SUM(SAL) OVER(ORDER BY SAL 
										ROWS BETWEEN UNBOUNDED PRECEDING 
										AND CURRENT ROW) "현재 행 까지 합계"
FROM EMP;

-- 현재 행 부터 마지막 행까지 합계
SELECT EMPNO, ENAME, SAL, SUM(SAL) OVER(ORDER BY SAL 
										ROWS BETWEEN CURRENT ROW 
										AND UNBOUNDED FOLLOWING) "현재 부터 마지막까지 합계"
FROM EMP;

-- ROWS 와 RANGE 차이
SELECT NAME, DEPART, SALARY, SUM(SALARY) 
OVER(ORDER BY SALARY
ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS 누적월급 FROM TSTAFF;

SELECT NAME, DEPART, SALARY, SUM(SALARY) 
OVER(ORDER BY SALARY
RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS 누적월급 FROM TSTAFF;

-- 관리자 별 평균
SELECT ENAME, SAL, MGR,
	AVG(SAL) OVER(PARTITION BY MGR) "관리자별 평균"
FROM EMP;

-- 순위
SELECT ENAME, SAL,
	RANK() OVER(ORDER BY SAL DESC) "전체 순위",
	JOB,
	RANK() OVER(PARTITION BY JOB ORDER BY SAL DESC) "직무 순위"
FROM EMP;

SELECT ENAME, SAL,
	RANK() OVER(ORDER BY SAL DESC) "RANK",
	ROW_NUMBER() OVER(ORDER BY SAL DESC) "ROW NUMBER RANK",
	DENSE_RANK() OVER(ORDER BY SAL DESC) "DENSE RANK"
FROM EMP;

-- 행순서 관련 함수
-- 첫번째 값 조회
SELECT DEPTNO, ENAME, SAL,
	FIRST_VALUE(ENAME) OVER(PARTITION BY DEPTNO 
	ORDER BY SAL DESC ROWS UNBOUNDED PRECEDING) AS DEPT_A 
FROM EMP;

-- 마지막 값 조회
SELECT DEPTNO, ENAME, SAL,
	LAST_VALUE(ENAME) OVER(PARTITION BY DEPTNO 
	ORDER BY SAL DESC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS DEPT_A 
FROM EMP;

-- 이전 행 조회
SELECT DEPTNO, ENAME, SAL,
	LAG(SAL) OVER(ORDER BY SAL DESC) AS "이전 급여"
FROM EMP;

-- 댜음 2번째행 조회
SELECT DEPTNO, ENAME, SAL,
	LEAD(SAL, 2) OVER(ORDER BY SAL DESC) AS "다음 2번째 급여"
FROM EMP;


-- 비율 관련 함수
SELECT DEPTNO, ENAME, SAL,
	PERCENT_RANK() OVER(PARTITION BY DEPTNO 
						ORDER BY SAL DESC) AS "급여 비율" 
FROM EMP;

SELECT DEPTNO, ENAME, SAL,
 	NTILE(4) OVER(ORDER BY SAL DESC) AS "급여 4등분" 
FROM EMP;


-- 샘플 데이터 생성
CREATE TABLE TSEASON
(
	ITEM VARCHAR(10),
	SEASON VARCHAR(10),
	SALE INT
);

INSERT INTO TSEASON VALUES ('냉면', '봄', 20);
INSERT INTO TSEASON VALUES ('냉면', '여름', 50);
INSERT INTO TSEASON VALUES ('냉면', '가을', 30);
INSERT INTO TSEASON VALUES ('냉면', '겨울', 10);
INSERT INTO TSEASON VALUES ('짬뽕', '봄', 30);
INSERT INTO TSEASON VALUES ('짬뽕', '여름', 10);
INSERT INTO TSEASON VALUES ('짬뽕', '가을', 20);
INSERT INTO TSEASON VALUES ('짬뽕', '겨울', 40);

-- SEASON 별 SAL 의 최대값
SELECT * FROM TSEASON
PIVOT (MAX(SALE) FOR SEASON IN ('봄', '여름', '가을', '겨울'));

-- 순서 변경 및 겨울 제외
SELECT * FROM TSEASON
PIVOT (MAX(SALE) FOR SEASON IN ('여름', '봄', '가을'));

-- 샘플 데이터
CREATE TABLE TTRAFFIC
(
	LINE VARCHAR(10),
	HOUR INT,
	CAR VARCHAR(20),
	TRAFFIC INT
);

INSERT INTO TTRAFFIC VALUES ('경부', 1, '승용차', 40);
INSERT INTO TTRAFFIC VALUES ('경부', 2, '승용차', 41);
INSERT INTO TTRAFFIC VALUES ('경부', 3, '승용차', 42);
INSERT INTO TTRAFFIC VALUES ('경부', 1, '트럭', 30);
INSERT INTO TTRAFFIC VALUES ('경부', 3, '트럭', 32);
INSERT INTO TTRAFFIC VALUES ('호남', 1, '승용차', 20);
INSERT INTO TTRAFFIC VALUES ('호남', 2, '승용차', 10);
INSERT INTO TTRAFFIC VALUES ('호남', 2, '승용차', 11);
INSERT INTO TTRAFFIC VALUES ('호남', 3, '승용차', 22);
INSERT INTO TTRAFFIC VALUES ('호남', 1, '트럭', 10);
INSERT INTO TTRAFFIC VALUES ('호남', 2, '트럭', 11);
INSERT INTO TTRAFFIC VALUES ('호남', 3, '트럭', 12);

-- 승용차 와 트럭으로 분류해서 TRAFFIC 의 합계 피봇
SELECT * FROM TTRAFFIC 
PIVOT (SUM(TRAFFIC) FOR CAR IN ('승용차', '트럭')) pvt;

-- 승용차 와 트럭으로 분류해서 TRAFFIC 의 합계 피봇 - LINE 만 선택: 에러
-- 피봇 결과에 CAR 와 TRAFFIC 이 없음 
SELECT LINE, CAR, TRAFFIC FROM TTRAFFIC 
PIVOT (SUM(TRAFFIC) FOR CAR IN ('승용차', '트럭')) pvt;

-- 피봇을 인라인 뷰로 설정
SELECT * FROM
(
	SELECT LINE, CAR, TRAFFIC FROM TTRAFFIC
) prepvt
PIVOT (SUM(TRAFFIC) FOR CAR IN ('승용차', '트럭')) pvt;

-- group by를 이용
SELECT LINE, SUM(승용차), SUM(트럭) FROM TTRAFFIC
PIVOT (SUM(TRAFFIC) FOR CAR IN ('승용차' AS 승용차, '트럭' AS 트럭)) pvt
GROUP BY LINE;

-- 승용차 와 트럭으로 분류해서 TRAFFIC 의 합계 피봇 - HOUR 만 선택
SELECT * FROM
(
	SELECT HOUR, CAR, TRAFFIC FROM TTRAFFIC
) prepvt
PIVOT (SUM(TRAFFIC) FOR CAR IN ('승용차', '트럭')) pvt;

-- 승용차 와 트럭으로 분류해서 TRAFFIC 의 합계 피봇 - 전체 통행량만 조회 
SELECT * FROM
(
	SELECT CAR, TRAFFIC FROM TTRAFFIC
) prepvt
PIVOT (SUM(TRAFFIC) FOR CAR IN ('승용차', '트럭')) pvt;

-- 포맷 변경 
SELECT LINE || '선 ' || CAST(HOUR AS VARCHAR(10)) || '시' AS 구분, 트럭, 승용차 FROM
(
	SELECT LINE, HOUR, CAR, TRAFFIC FROM TTRAFFIC
) prepvt
PIVOT (SUM(TRAFFIC) FOR CAR IN ('승용차' AS 승용차, '트럭' AS 트럭)) pvt
ORDER BY LINE;

-- 샘플 데이터
CREATE TABLE TCITYSTAT
(
	NAME CHAR(10),
	ATTR CHAR(10),
	VALUE INT
);

INSERT INTO TCITYSTAT VALUES ('서울', 'area', 605);
INSERT INTO TCITYSTAT VALUES ('서울', 'popu', 974);
INSERT INTO TCITYSTAT VALUES ('서울', 'gu', 25);
INSERT INTO TCITYSTAT VALUES ('인제', 'area', 1646);
INSERT INTO TCITYSTAT VALUES ('인제', 'popu', 3);
INSERT INTO TCITYSTAT VALUES ('인제', 'home', 15409);
INSERT INTO TCITYSTAT VALUES ('홍천', 'area', 1819);

-- 인구 밀도 확인
SELECT NAME, ROUND(popu * 10000 / area, 2) AS 인구밀도 FROM
(
    SELECT * FROM TCITYSTAT
    PIVOT (MAX(VALUE) FOR ATTR IN ('area' AS area, 'popu' AS popu)) pvt
) A;

SELECT NAME, ROUND(popu * 10000 / area, 2) AS 인구밀도 FROM
(
    SELECT * FROM TCITYSTAT
    PIVOT (MAX(VALUE) FOR ATTR IN ('area' AS area, 'popu' AS popu)) pvt
    WHERE popu IS NOT NULL AND area IS NOT NULL
) A;


-- 실습을 위한 피봇 생성
CREATE TABLE TSEASONPivot AS 
SELECT * FROM TSEASON
PIVOT (SUM(SALE) FOR SEASON IN ('봄' AS 봄, '여름' AS 여름, '가을' AS 가을, '겨울' AS 겨울));

-- 피봇 해제
SELECT * FROM TSEASONPivot
UNPIVOT (SALE FOR SEASON IN (봄, 여름, 가을, 겨울)) unpvt;
